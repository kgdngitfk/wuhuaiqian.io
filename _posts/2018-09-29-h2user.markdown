---
layout:     post
title:      "h2的使用"
subtitle:   "h2database"
date:       2018-09-29
author:     "wuhuaiqian"
header-img: "img/post-bg-js-version.jpg"
tags:
    - database
    - h2database
---
###简介
最近在项目中需要用到内嵌的数据库以简化开发中部分缓存的读取,自己通过代码的话,对应部分字典数据,需要把关系数据库库的
二维表支持的SQL查询如  select * from level where id=1 转化成一个map<id,Level>以支持特定的操作,这是一个比较繁琐的过程,而且通用性不好,
当需要查询id大于4的level时又要自己写具体的查询实现,SQL提供了标准统一的查询,所以想到了使用一种支持在内存中进行SQL查询的数据库,
查找了很多资料,支持内存模式的数据库有H2,Derby,HSQLDB,对比了一下功能特性和Tutorial文档后决定选用[H2 Database](http://www.h2database.com/html/main.html)
h2database是一个纯java实现的数据库,它支持
- Embedded (local) connection
   (在程序中使用,数据持久化到文件中,你的应用程序可以自带数据库)
- In-memory(数据只保存在内存中,应用停止后数据丢失)
- Server mode (remote connections) using TCP/IP
(网络模式通过TCP/IP协议支持网络连接),支持SSL加密,同时数据持久化的文件也支持加密等高级特性,功能强大,可以当作一个
简化版的MySQL
- 本文只介绍In-memory模式的使用更多特性可以查看[官网](http://www.h2database.com/html/main.html)
###使用
1. 添加jar包到类路径,或者通过maven,gradle等工具引入依赖
2. 示例代码
```
  String ct="CREATE TABLE USER(id INT,NAME VARCHAR);";
         String insert="insert into user(id,name)values('1','hello')";
         String select="select * from user where id=1";
         String function="select rand() from dual";
         JdbcDataSource ds = new JdbcDataSource();
         ds.setURL("jdbc:h2:mem:");
         ds.setUser("sa");
         ds.setPassword("sa");
         Connection conn = ds.getConnection();
         conn.prepareStatement(ct).execute();
         conn.prepareStatement(insert).execute();
         ResultSet resultSet = conn.prepareStatement(select).executeQuery();
         ResultSetMetaData metaData = resultSet.getMetaData();
         while (resultSet.next()){
             int i=1;
             while (i<=metaData.getColumnCount())
             System.out.print(resultSet.getObject(i++)+"\t");
             System.out.println();
         }
         ResultSet resultSet1 = conn.prepareStatement(function).executeQuery();
         while (resultSet1.next()){
             System.out.println(resultSet1.getObject(1));
         }
```
3 在实际项目中使用
    项目中如果使用了mybatis,hibernate等ORM框架,只需要将数据源切换到h2就可以无疑切换
    例如如果全用的druid作为数据库连接池管理,可配置如下bean
```
<bean id="h2dataSource" class="com.alibaba.druid.pool.DruidDataSource"
              init-method="init" destroy-method="close"
              p:name="h2Cache" p:url="jdbc:h2:mem:cache" p:username="root"
              p:password="root" p:maxActive="100" p:initialSize="1" p:testOnBorrow="true"
              p:validationQuery="SELECT 1" p:filters="stat,config"
              p:proxyFilters-ref="log-filter">
```

剩下的配置就是ORM框架的内容了,不在本文讨论的范围之内